version: '3.8'

services:
  mongodb:
    image: mongo:latest
    container_name: mongo_db
    networks:
      - project_network
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: user
      MONGO_INITDB_ROOT_PASSWORD: password

  mongo-express:
    image: mongo-express:latest
    container_name: mongo_express
    networks:
      - project_network
    depends_on:
      - mongodb
    ports:
      - "8083:8083"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: user
      ME_CONFIG_MONGODB_ADMINPASSWORD: password
      ME_CONFIG_MONGODB_SERVER: mongo_db

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    networks:
      - project_network
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    restart: unless-stopped

  kafka1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka1
    networks:
      - project_network
    ports:
      - "8097:8097"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:8097,PLAINTEXT://kafka1:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    restart: unless-stopped

  kafka2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka2
    networks:
      - project_network
    ports:
      - "8098:8098"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:8098,PLAINTEXT://kafka2:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    restart: unless-stopped

  kafka3:
    image: confluentinc/cp-kafka:latest
    container_name: kafka3
    networks:
      - project_network
    ports:
      - "8099:8099"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT_HOST:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:8099,PLAINTEXT://kafka3:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    restart: unless-stopped

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: schema_registry
    networks:
      - project_network
    ports:
      - "8081:8081"
    depends_on:
      - zookeeper
      - kafka1
      - kafka2
      - kafka3
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema_registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:9092,PLAINTEXT://kafka2:9093,PLAINTEXT://kafka3:9094
      SCHEMA_REGISTRY_DEBUG: 'true'
    restart: always

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka_ui
    networks:
      - project_network
    ports:
      - "8090:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092,kafka2:9092,kafka3:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  admin-service:
    image: openjdk:17-jdk
    container_name: admin_service
    networks:
      - project_network
    ports:
      - "8080:8080"
    volumes:
      - ./admin-service:/app
    working_dir: /app
    command: java -jar ./target/admin-service-0.0.1-SNAPSHOT.jar
    environment:
      SPRING_DATA_MONGODB_USERNAME: user
      SPRING_DATA_MONGODB_PASSWORD: password
      SPRING_DATA_MONGODB_HOST: mongo_db
      SPRING_DATA_MONGODB_PORT: 27017
      SPRING_DATA_MONGODB_DATABASE: flights-db
      SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE: admin
      SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS: "kafka1:9092,kafka2:9092,kafka3:9092"
      SPRING_KAFKA_PRODUCER_PROPERTIES_SCHEMA_REGISTRY_URL: "http://schema_registry:8081"
      SPRING_KAFKA_CONSUMER_BOOTSTRAP_SERVERS: "kafka1:9092,kafka2:9092,kafka3:9092"
      SPRING_KAFKA_CONSUMER_PROPERTIES_SCHEMA_REGISTRY_URL: "http://schema_registry:8081"
      SPRING_KAFKA_CONSUMER_GROUP_ID: admin-group
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest
    depends_on:
      - mongodb
      - schema-registry

  booking-service:
    image: openjdk:17-jdk
    container_name: booking_service
    networks:
      - project_network
    ports:
      - "8088:8088"
    volumes:
      - ./booking-service:/app
    working_dir: /app
    command: java -jar ./target/booking-service-1.0-SNAPSHOT.jar
    environment:
      SPRING_DATA_MONGODB_URI: "mongodb://user:password@mongo_db:27017/flight_booking?authSource=admin"
      SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS: "kafka1:9092,kafka2:9092,kafka3:9092"
      SPRING_KAFKA_PRODUCER_PROPERTIES_SCHEMA_REGISTRY_URL: "http://schema_registry:8081"
      SPRING_KAFKA_CONSUMER_BOOTSTRAP_SERVERS: "kafka1:9092,kafka2:9092,kafka3:9092"
      SPRING_KAFKA_CONSUMER_PROPERTIES_SCHEMA_REGISTRY_URL: "http://schema_registry:8081"
    depends_on:
      - mongodb
      - schema-registry

  flight-search:
    image: openjdk:17-jdk
    container_name: flight_search_service
    networks:
      - project_network
    ports:
      - "8082:8082"
    volumes:
      - ./flight-search:/app
    working_dir: /app
    command: java -jar ./target/flight-search-0.0.1-SNAPSHOT.jar

  notification-service:
    image: openjdk:17-jdk
    container_name: notification_service
    networks:
      - project_network
    ports:
      - "8086:8086"
    volumes:
      - ./notification-service:/app
    working_dir: /app
    command: java -jar ./target/notification-service-0.0.1-SNAPSHOT.jar
    environment:
      SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS: "kafka1:9092,kafka2:9092,kafka3:9092"
      SPRING_KAFKA_PRODUCER_PROPERTIES_SCHEMA_REGISTRY_URL: "http://schema_registry:8081"
      SPRING_KAFKA_CONSUMER_BOOTSTRAP_SERVERS: "kafka1:9092,kafka2:9092,kafka3:9092"
      SPRING_KAFKA_CONSUMER_PROPERTIES_SCHEMA_REGISTRY_URL: "http://schema_registry:8081"
    depends_on:
      - schema-registry

  payment-service:
    image: openjdk:17-jdk
    container_name: payment_service
    networks:
      - project_network
    ports:
      - "8085:8085"
    volumes:
      - ./payment-service:/app
    working_dir: /app
    command: java -jar ./target/payment-service-0.0.1-SNAPSHOT.jar
    environment:
      SPRING_KAFKA_PRODUCER_BOOTSTRAP_SERVERS: "kafka1:9092,kafka2:9092,kafka3:9092"
      SPRING_KAFKA_PRODUCER_PROPERTIES_SCHEMA_REGISTRY_URL: "http://schema_registry:8081"
      SPRING_KAFKA_CONSUMER_BOOTSTRAP_SERVERS: "kafka1:9092,kafka2:9092,kafka3:9092"
      SPRING_KAFKA_CONSUMER_PROPERTIES_SCHEMA_REGISTRY_URL: "http://schema_registry:8081"
      SPRING_DATA_MONGODB_URI: "mongodb://user:password@mongo_db:27017/payments?authSource=admin"
    depends_on:
      - mongodb
      - schema-registry

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.20
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
      - network.host= 0.0.0.0
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - project_network

  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.20
    container_name: es02
    environment:
      - node.name=es02
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data02:/usr/share/elasticsearch/data
    networks:
      - project_network
  
  es03:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.20
    container_name: es03
    environment:
      - node.name=es03
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data03:/usr/share/elasticsearch/data
    networks:
      - project_network

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.17.20
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=http://es01:9200
    ports:
      - "5601:5601"
    depends_on:
      - es01
    networks:
      - project_network

networks:
  project_network:

volumes:
  mongo-data:
  data01:
  data02:
  data03:
